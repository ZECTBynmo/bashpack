#!/usr/bin/env node
// vim: ft=javascript

var program = require('commander');
var cli = require('../lib/cli.js');
var version = require('../lib/version.js');

program.version(version);


program.command('init <projectdir>')
  .option('-f, --force','Force overwrite')
  .action(function(options) {
    cli.init(projectdir,options);
    process.exit(0);
  });


program.command('build <projectdir> <startscript>')
  .option('--log-level <loglevel>','Set loglevel [info]','info')
  .option('--log-timestamp','Enable timestamps in log-output')
  .option('--no-log-colorize','Disable colors in log-output')
  .option('--no-log-pretty-print','Disable pretty-print log-output')
  .option('-m, --log-mute','Disable log-output')
  .option('-d, --debug','Enable debug level')
  .option('-o, --output-file <outputfile>','Outputfile [bashpack.run]','bashpack.run')
  .option('-f, --force','Force overwrite')
  .option('-e, --exclude <patterns>', 'Pattern to exclude [\'.git/*\']',['.git/*'])
  .option('-l, --libs <pattern>', 'Shared libraries to include []',[])
  .option('-X, --exclude-file <excludefile>','File that contains the (shell)patterns to exclude')
  .option('-s, --skip-node-include','Don\'t include a node binary in the bashpack')
  .option('-b, --node-binary <node-filename>','File path to node binary [auto-detect from path]')
  .action(function(projectdir,startscript,options) {
    cli.build(projectdir,startscript,options);
    process.exit(0);
  });

program.parse(process.argv);

if (!program.args.length) {
  program.help();
} else {
  var subcommands = [ 'build', 'init' , 'version' ];
  if (subcommands.indexOf(program.args) < 0) {
    program.help();
  }
}


